program: declaration*

?declaration: function_declaration
            | variable_declaration
            | statement

function_declaration: "fun" _function

_function: IDENTIFIER "(" [parameters] ")" block

// Not an AST node. Used for collecting arguments into a list for
// ast.FunctionDeclaration nodes.
parameters: IDENTIFIER ( "," IDENTIFIER )*

variable_declaration: "var" IDENTIFIER ( "=" expression )? ";"

?statement: expression_statement
          | for_statement
          | if_statement
          | print_statement
          | return_statement
          | while_statement
          | block

// Not an AST node. Gets desugared by the parser into an equivalent while statement.
for_statement: "for" "(" ( variable_declaration | expression_statement | empty_initializer ) [expression] ";" [expression] ")" statement

!empty_initializer: ";"

if_statement: "if" "(" expression ")" statement ( "else" statement )?

while_statement: "while" "(" expression ")" statement

block: "{" declaration* "}"

expression_statement: expression ";"

print_statement: "print" expression ";"

return_statement: _return_keyword [expression] ";"

// Used to keep track of the return statement's location for error reporting.
!_return_keyword: "return"

?expression: assignment

?assignment: logic_or
           | IDENTIFIER "=" assignment -> assignment

?logic_or: logic_and
         | logic_or _logic_or_operator logic_and -> logical_expression

?logic_and: equality
          | logic_and _logic_and_operator equality -> logical_expression

?equality: comparison
         | equality _equality_operator comparison -> binary

?comparison: term
           | comparison _comparison_operator term -> binary

?term: factor
     | term _addition_operator factor -> binary

?factor: unary_expr
       | factor _multipication_operator unary_expr -> binary

?unary_expr: call
           | _unary_operator unary_expr -> unary

?call: primary
     | call "(" [arguments] _closing_paren -> call

// Used for returning the closing paren's location when reporting runtime
// errors caused by function calls.
!_closing_paren: ")"

// Not an AST node. Used for collecting arguments into a list for
// ast.Call nodes.
arguments: expression ( "," expression )*

?primary: NUMBER -> literal
        | STRING -> literal
        | const_true -> literal
        | const_false -> literal
        | const_nil -> literal
        | "(" expression ")" -> grouping
        | variable

variable: IDENTIFIER

!_equality_operator: "!=" | "=="
!_comparison_operator: ">" | ">=" | "<" | "<="
!_addition_operator: "-" | "+"
!_multipication_operator: "/" | "*"
!_unary_operator: "!" | "-"
!_logic_or_operator: "or"
!_logic_and_operator: "and"

// Not actual AST nodes. Used by the parser to transform bools
// and nil to their Python values.
const_true: "true"
const_false: "false"
const_nil: "nil"

// TODO: write own terminals based on Lox grammar instead
%import common.NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.CNAME -> IDENTIFIER

%import common.WS
%ignore WS

COMMENT: /\s*/ "//" /[^\n]/*

%ignore COMMENT
