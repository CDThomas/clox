?expression: equality

?equality: comparison
         | equality _equality_operator comparison -> binary

?comparison: term
           | comparison _comparison_operator term -> binary

?term: factor
     | term _addition_operator factor -> binary

?factor: unary_expr
       | factor _multipication_operator unary_expr -> binary

?unary_expr: primary
      | _unary_operator unary_expr -> unary

?primary: NUMBER -> literal
        | STRING -> literal
        | const_true -> literal
        | const_false -> literal
        | const_nil -> literal
        | "(" expression ")" -> grouping

!_equality_operator: BANG_EQUAL | EQUAL_EQUAL
!_comparison_operator: GREATER | GREATER_EQUAL | LESS | LESS_EQUAL
!_addition_operator: "-" | "+"
!_multipication_operator: "/" | "*"
!_unary_operator: "!" | "-"

const_true: "true"
const_false: "false"
const_nil: "nil"

// These are here so that token types from Lark have proper names (instead of
// names like __ANON_0).
BANG_EQUAL: "!="
EQUAL_EQUAL: "=="
GREATER: ">"
LESS: "<"
GREATER_EQUAL: ">="
LESS_EQUAL: "<="


// TODO: write own terminals based on Lox grammar instead
%import common.NUMBER
%import common.ESCAPED_STRING -> STRING

%import common.WS
%ignore WS
